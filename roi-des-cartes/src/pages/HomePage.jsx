import { useState, useRef, useEffect } from "react";
import { useNavigate } from "react-router-dom";

function Home() {
  const navigate = useNavigate();
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isPlaying, setIsPlaying] = useState(true);
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const audioRef = useRef(null);

  const slides = [
    {
      title: "Bienvenue !",
      name: (
        <>
          <div className="glitch" data-text="ROI DES CARTES">
            <span className="subtitle">ROI DES CARTES</span>
          </div>
        </>
      ),
      content: (
        <>
          <img
            src="/assets/king.webp"
            alt="Roi des Cartes"
            className="intro-image"
          />
          PrÃ©parez-vous pour une expÃ©rience unique.
        </>
      ),
    },
    {
      title: "Contexte du jeu",
      content:
        "Vous et votre Ã©quipe Ãªtes soudainement tÃ©lÃ©portÃ©s dans une version parallÃ¨le de Grenoble, devenue dÃ©serte et chaotique. Pour survivre et retourner dans le monde rÃ©el, vous devez participer Ã  un jeu de cartes mortel orchestrÃ© par une entitÃ© mystÃ©rieuse appelÃ©e le Roi des Cartes. Chaque carte reprÃ©sente une Ã©preuve ou une Ã©nigme Ã  rÃ©soudre, avec des niveaux de difficultÃ© et de danger variÃ©s. Le seul moyen de survivre est de rÃ©ussir toutes les Ã©preuves et de rÃ©cupÃ©rer toutes les cartes avant la fin du temps imparti.",
      name: null,
      cards: null,
    },
    {
      title: "CatÃ©gories",
      content: null,
      name: null,
      cards: [
        {
          title: "Logique et StratÃ©gie",
          description:
            "Ce sont des Ã©nigmes mathÃ©matiques ou de logique pure, oÃ¹ il faut rÃ©soudre des puzzles complexes en un temps limitÃ©, avec un niveau de difficultÃ© facile (niveau 2)",
          image: "/assets/pique.webp",
        },
        {
          title: "Survie",
          description:
            "Ce sont des Ã©nigmes ou dÃ©fis oÃ¹ la rapiditÃ© d'exÃ©cution est cruciale. Chaque Ã©nigme oblige les joueurs Ã  rÃ©soudre des puzzles sous pression, avec un niveau de difficultÃ© moyen (niveau 4).",
          image: "/assets/carreaux.webp",
        },
        {
          title: "Jeux d'Ã©quipes",
          description:
            "Ces Ã©preuves requiÃ¨rent coordination et collaboration : chaque joueur rÃ©sout une partie de l'Ã©nigme, la rÃ©ussite dÃ©pend de l'Ã©quipe, avec un niveau de difficultÃ© modÃ©rÃ© (niveau 6).",
          image: "/assets/trefles.webp",
        },
        {
          title: "Psychologie",
          description:
            "Ces Ã©preuves mÃªlent confiance et trahison, avec des dÃ©cisions collectives ou des Ã©nigmes testant la cohÃ©sion du groupe, avec un niveau de difficultÃ© Ã©levÃ© (niveau 8).",
          image: "/assets/coeur.webp",
        },
      ],
    },
  ];

  const handlePrevious = () => {
    if (currentSlide > 0) {
      setCurrentSlide(currentSlide - 1);
    }
  };

  const handleStart = () => {
    navigate("/login");
  };

  const handleNextSlide = () => {
    setCurrentSlide(currentSlide + 1);
  };

  const toggleMusic = () => {
    if (isPlaying) {
      audioRef.current.pause();
    } else {
      audioRef.current.play();
    }
    setIsPlaying(!isPlaying);
  };

  const handleNextCard = () => {
    setCurrentCardIndex(
      (prevIndex) => (prevIndex + 1) % slides[2].cards.length
    );
  };

  const handlePreviousCard = () => {
    setCurrentCardIndex((prevIndex) =>
      prevIndex === 0 ? slides[2].cards.length - 1 : prevIndex - 1
    );
  };

  useEffect(() => {
    const playAudio = () => {
      audioRef.current.play().catch(() => {
        setIsPlaying(false);
      });
    };

    if (audioRef.current) {
      playAudio();
    }

    document.addEventListener("visibilitychange", playAudio);

    return () => {
      document.removeEventListener("visibilitychange", playAudio);
    };
  }, []);

  return (
    <div className="home-page">
      <div className="blood-animation"></div>
      <audio
        ref={audioRef}
        src="/assets/music/Intro.mp3"
        preload="auto"
        loop
        autoPlay
      ></audio>
      <div
        className={`slider-container ${currentSlide === 0 ? "clickable" : ""}`}
        onClick={currentSlide === 0 ? handleNextSlide : null}
      >
        <div className="slide">
          <h1>{slides[currentSlide].title}</h1>
          <p className={`content ${currentSlide === 2 ? "no-padding" : ""}`}>
            {slides[currentSlide].content}
          </p>
          <h3>{slides[currentSlide].name}</h3>
          {slides[currentSlide].cards && (
            <div className="cards-container">
              <div className="card-slider">
                <button className="btn-slider" onClick={handlePreviousCard}>
                  â€¹
                </button>
                <div className="card">
                  <img
                    src={slides[2].cards[currentCardIndex].image}
                    alt={slides[2].cards[currentCardIndex].title}
                    className="card-image"
                  />
                  <h3>{slides[2].cards[currentCardIndex].title}</h3>
                  <p>{slides[2].cards[currentCardIndex].description}</p>
                </div>
                <button className="btn-slider" onClick={handleNextCard}>
                  â€º
                </button>
              </div>
            </div>
          )}
        </div>

        <div className="navigation">
          {currentSlide > 0 && (
            <div className="navigation-buttons">
              <button onClick={handlePrevious}>&#8592;</button>
            </div>
          )}

          {currentSlide < 2 && currentSlide > 0 && (
            <div className="navigation-buttons">
              <button onClick={handleNextSlide}>&#8594;</button>
            </div>
          )}

          {currentSlide === 2 && (
            <div className="navigation-buttons">
              <button onClick={handleStart}>&#8594;</button>
            </div>
          )}
        </div>

        {currentSlide === 0 && (
          <div className="blinking-text">Cliquez ici </div>
        )}
      </div>
      <button className="sound-button" onClick={toggleMusic}>
        {isPlaying ? "ðŸ”Š" : "ðŸ”‡"}
      </button>
    </div>
  );
}

export default Home;
